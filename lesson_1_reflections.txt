How did viewing a diff between two versions of a file help you see the bug that was introduced?

By comparing the lines that are differ between the two versions, I spotted bug.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

If the code is long and I made a typo, old file would help me to find the typo just as we did in one of the exercise before.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

Pros: commit at a logical point. Cons: forget to commit or commit too often

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because those version control systems (ex. Git) are designed to do more sophiscated version control jobs, while others (ex. Google Docs) are just for general purpose document storing.

How can you use the commands git log and git diff to view the history of files?

I will type the basic syntax of those two command.
git log
git diff id1_old_ver id2_new_ver

How might using version control make you more confident to make changes that could break something?

git checkout id allows me to go back to the previous version of the code and find out which change introduces the bug.

Let me also document another commonly used git command: git clone

Now that you have your workspace set up, what do you want to try using Git for?

I will try to use it for the problem sets and projects from other Udacity courses.